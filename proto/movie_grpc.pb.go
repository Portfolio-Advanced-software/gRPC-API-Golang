// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: proto/movie.proto

package moviepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateMovie(ctx context.Context, in *CreateMovieReq, opts ...grpc.CallOption) (*CreateMovieRes, error)
	ReadMovie(ctx context.Context, in *ReadMovieReq, opts ...grpc.CallOption) (*ReadMovieRes, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error)
	ListMovies(ctx context.Context, in *ListMoviesReq, opts ...grpc.CallOption) (MovieService_ListMoviesClient, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieReq, opts ...grpc.CallOption) (*CreateMovieRes, error) {
	out := new(CreateMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ReadMovie(ctx context.Context, in *ReadMovieReq, opts ...grpc.CallOption) (*ReadMovieRes, error) {
	out := new(ReadMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/ReadMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error) {
	out := new(UpdateMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error) {
	out := new(DeleteMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ListMovies(ctx context.Context, in *ListMoviesReq, opts ...grpc.CallOption) (MovieService_ListMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[0], "/movie.MovieService/ListMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceListMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieService_ListMoviesClient interface {
	Recv() (*ListMoviesRes, error)
	grpc.ClientStream
}

type movieServiceListMoviesClient struct {
	grpc.ClientStream
}

func (x *movieServiceListMoviesClient) Recv() (*ListMoviesRes, error) {
	m := new(ListMoviesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	CreateMovie(context.Context, *CreateMovieReq) (*CreateMovieRes, error)
	ReadMovie(context.Context, *ReadMovieReq) (*ReadMovieRes, error)
	UpdateMovie(context.Context, *UpdateMovieReq) (*UpdateMovieRes, error)
	DeleteMovie(context.Context, *DeleteMovieReq) (*DeleteMovieRes, error)
	ListMovies(*ListMoviesReq, MovieService_ListMoviesServer) error
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieReq) (*CreateMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) ReadMovie(context.Context, *ReadMovieReq) (*ReadMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieReq) (*UpdateMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieReq) (*DeleteMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) ListMovies(*ListMoviesReq, MovieService_ListMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ReadMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ReadMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/ReadMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ReadMovie(ctx, req.(*ReadMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ListMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMoviesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).ListMovies(m, &movieServiceListMoviesServer{stream})
}

type MovieService_ListMoviesServer interface {
	Send(*ListMoviesRes) error
	grpc.ServerStream
}

type movieServiceListMoviesServer struct {
	grpc.ServerStream
}

func (x *movieServiceListMoviesServer) Send(m *ListMoviesRes) error {
	return x.ServerStream.SendMsg(m)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "ReadMovie",
			Handler:    _MovieService_ReadMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMovies",
			Handler:       _MovieService_ListMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/movie.proto",
}
